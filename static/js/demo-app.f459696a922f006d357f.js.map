{"version":3,"sources":["/Users/danhomola/repositories/personal/react-geolocated/src/index.js","/Users/danhomola/repositories/personal/react-geolocated/demo/Demo.jsx","/Users/danhomola/repositories/personal/react-geolocated/demo/App.jsx","/Users/danhomola/repositories/personal/react-geolocated/demo/App.mdx"],"names":["getDisplayName","WrappedComponent","displayName","name","geolocated","positionOptions","enableHighAccuracy","maximumAge","timeout","Infinity","isOptimisticGeolocationEnabled","userDecisionTimeout","suppressLocationOnMount","watchPosition","geolocationProvider","navigator","geolocation","result","props","state","coords","isGeolocationAvailable","Boolean","isGeolocationEnabled","positionError","isCurrentlyMounted","onPositionError","bind","onPositionSuccess","cancelUserDecisionTimeout","getLocation","this","userDecisionTimeoutId","clearTimeout","setState","onError","position","onSuccess","getCurrentPosition","Error","funcPosition","setTimeout","watchId","clearWatch","Component","geoPropTypes","PropTypes","shape","latitude","number","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","bool","code","oneOf","message","string","formatDegrees","degrees","isLongitude","getDirection","style","fontSize","fontWeight","margin","className","JSON","stringify","App","innerRef","useRef","textAlign","error","console","log","ref","onClick","current","type","layoutProps","MDXLayout","MDXContent","components","mdxType","isMDXComponent"],"mappings":"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","file":"static/js/demo-app.d0419ed8.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction getDisplayName(WrappedComponent) {\n    return `Geolocated(${WrappedComponent.displayName ||\n        WrappedComponent.name ||\n        \"Component\"})`;\n}\n\nexport const geolocated = ({\n    positionOptions = {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: Infinity,\n    },\n    isOptimisticGeolocationEnabled = true,\n    userDecisionTimeout = null,\n    suppressLocationOnMount = false,\n    watchPosition = false,\n    geolocationProvider = typeof navigator !== \"undefined\" &&\n        navigator.geolocation,\n} = {}) => WrappedComponent => {\n    let result = class Geolocated extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                coords: null,\n                isGeolocationAvailable: Boolean(geolocationProvider),\n                isGeolocationEnabled: isOptimisticGeolocationEnabled,\n                positionError: null,\n            };\n\n            this.isCurrentlyMounted = false;\n\n            this.onPositionError = this.onPositionError.bind(this);\n            this.onPositionSuccess = this.onPositionSuccess.bind(this);\n            this.cancelUserDecisionTimeout = this.cancelUserDecisionTimeout.bind(\n                this,\n            );\n            this.getLocation = this.getLocation.bind(this);\n        }\n\n        cancelUserDecisionTimeout() {\n            if (this.userDecisionTimeoutId) {\n                clearTimeout(this.userDecisionTimeoutId);\n            }\n        }\n\n        onPositionError(positionError) {\n            this.cancelUserDecisionTimeout();\n            if (this.isCurrentlyMounted) {\n                this.setState({\n                    coords: null,\n                    isGeolocationAvailable: this.state.isGeolocationAvailable,\n                    isGeolocationEnabled: false,\n                    positionError,\n                });\n            }\n            if (this.props.onError) {\n                this.props.onError(positionError);\n            }\n        }\n\n        onPositionSuccess(position) {\n            this.cancelUserDecisionTimeout();\n            if (this.isCurrentlyMounted) {\n                this.setState({\n                    coords: position.coords,\n                    isGeolocationAvailable: this.state.isGeolocationAvailable,\n                    isGeolocationEnabled: true,\n                    positionError: null,\n                });\n            }\n            if (this.props.onSuccess) {\n                this.props.onSuccess(position);\n            }\n        }\n\n        getLocation() {\n            if (\n                !geolocationProvider ||\n                !geolocationProvider.getCurrentPosition ||\n                !geolocationProvider.watchPosition\n            ) {\n                throw new Error(\"The provided geolocation provider is invalid\");\n            }\n\n            const funcPosition = (watchPosition\n                ? geolocationProvider.watchPosition\n                : geolocationProvider.getCurrentPosition\n            ).bind(geolocationProvider);\n\n            if (userDecisionTimeout) {\n                this.userDecisionTimeoutId = setTimeout(() => {\n                    this.onPositionError();\n                }, userDecisionTimeout);\n            }\n\n            this.watchId = funcPosition(\n                this.onPositionSuccess,\n                this.onPositionError,\n                positionOptions,\n            );\n        }\n\n        componentDidMount() {\n            this.isCurrentlyMounted = true;\n            if (!suppressLocationOnMount) {\n                this.getLocation();\n            }\n        }\n\n        componentWillUnmount() {\n            this.isCurrentlyMounted = false;\n            this.cancelUserDecisionTimeout();\n            if (watchPosition) {\n                geolocationProvider.clearWatch(this.watchId);\n            }\n        }\n\n        render() {\n            return <WrappedComponent {...this.state} {...this.props} />;\n        }\n    };\n    result.displayName = getDisplayName(WrappedComponent);\n    result.propTypes = {\n        onError: PropTypes.func,\n        onSuccess: PropTypes.func,\n    };\n    return result;\n};\n\nexport const geoPropTypes = {\n    coords: PropTypes.shape({\n        latitude: PropTypes.number,\n        longitude: PropTypes.number,\n        altitude: PropTypes.number,\n        accuracy: PropTypes.number,\n        altitudeAccuracy: PropTypes.number,\n        heading: PropTypes.number,\n        speed: PropTypes.number,\n    }),\n    isGeolocationAvailable: PropTypes.bool,\n    isGeolocationEnabled: PropTypes.bool,\n    positionError: PropTypes.shape({\n        code: PropTypes.oneOf([1, 2, 3]),\n        message: PropTypes.string,\n    }),\n    watchPosition: PropTypes.bool,\n};\n","import React from \"react\";\nimport { geolocated, geoPropTypes } from \"../src/index\";\n\nconst getDirection = (degrees, isLongitude) =>\n    degrees > 0 ? (isLongitude ? \"E\" : \"N\") : isLongitude ? \"W\" : \"S\";\n\n// adapted from http://stackoverflow.com/a/5786281/2546338\nconst formatDegrees = (degrees, isLongitude) =>\n    `${0 | degrees}Â° ${0 |\n        (((degrees < 0 ? (degrees = -degrees) : degrees) % 1) * 60)}' ${0 |\n        (((degrees * 60) % 1) * 60)}\" ${getDirection(degrees, isLongitude)}`;\n\nconst Demo = props => (\n    <div\n        style={{\n            fontSize: \"large\",\n            fontWeight: \"bold\",\n            margin: \"2rem\",\n        }}\n    >\n        {!props.isGeolocationAvailable ? (\n            <div>Your browser does not support Geolocation.</div>\n        ) : !props.isGeolocationEnabled ? (\n            <div>Geolocation is not enabled.</div>\n        ) : props.coords ? (\n            <div>\n                You are at{\" \"}\n                <span className=\"coordinate\">\n                    {formatDegrees(props.coords.latitude, false)}\n                </span>\n                ,{\" \"}\n                <span className=\"coordinate\">\n                    {formatDegrees(props.coords.longitude, true)}\n                </span>\n                {props.coords.altitude ? (\n                    <span>\n                        , approximately {props.coords.altitude} meters above sea\n                        level\n                    </span>\n                ) : null}\n                .\n            </div>\n        ) : (\n            <div>Getting the location data&hellip;</div>\n        )}\n        {!!props.positionError && (\n            <div>\n                <br />\n                Last position error:\n                <pre>{JSON.stringify(props.positionError)}</pre>\n            </div>\n        )}\n    </div>\n);\n\nDemo.propTypes = { ...Demo.propTypes, ...geoPropTypes };\n\nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(Demo);\n","import React, { useRef } from \"react\";\nimport Demo from \"./Demo.jsx\";\n\nconst App = () => {\n    const innerRef = useRef();\n\n    const getLocation = () => {\n        innerRef.current && innerRef.current.getLocation();\n    };\n\n    return (\n        <article style={{ textAlign: \"center\" }}>\n            {/* eslint-disable-next-line no-console*/}\n            <Demo onError={error => console.log(error)} ref={innerRef} />\n            <button\n                className=\"pure-button pure-button-primary\"\n                onClick={getLocation}\n                type=\"button\"\n            >\n                Get location\n            </button>\n        </article>\n    );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport App from \"./App\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <App mdxType=\"App\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}