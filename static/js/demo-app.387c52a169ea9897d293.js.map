{"version":3,"sources":["/Users/danhomola/repositories/personal/react-geolocated/src/index.js","/Users/danhomola/repositories/personal/react-geolocated/demo/Demo.jsx","/Users/danhomola/repositories/personal/react-geolocated/demo/App.jsx","/Users/danhomola/repositories/personal/react-geolocated/demo/App.mdx"],"names":["getDisplayName","WrappedComponent","displayName","name","geolocated","positionOptions","enableHighAccuracy","maximumAge","timeout","Infinity","isOptimisticGeolocationEnabled","userDecisionTimeout","suppressLocationOnMount","watchPosition","geolocationProvider","navigator","geolocation","result","props","userDecisionTimeoutId","clearTimeout","positionError","cancelUserDecisionTimeout","isCurrentlyMounted","setState","coords","isGeolocationEnabled","onError","position","onSuccess","getCurrentPosition","Error","funcPosition","bind","setTimeout","onPositionError","watchId","onPositionSuccess","state","isGeolocationAvailable","Boolean","this","getLocation","clearWatch","Component","geoPropTypes","PropTypes","shape","latitude","number","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","bool","code","oneOf","message","string","formatDegrees","degrees","isLongitude","getDirection","style","fontSize","fontWeight","margin","className","JSON","stringify","App","innerRef","useRef","textAlign","error","console","log","ref","onClick","current","type","layoutProps","MDXLayout","MDXContent","components","mdxType","isMDXComponent"],"mappings":"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","file":"static/js/demo-app.5f0a03be.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst getDisplayName = WrappedComponent =>\n    `Geolocated(${WrappedComponent.displayName ||\n        WrappedComponent.name ||\n        \"Component\"})`;\n\nexport const geolocated = ({\n    positionOptions = {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: Infinity,\n    },\n    isOptimisticGeolocationEnabled = true,\n    userDecisionTimeout = null,\n    suppressLocationOnMount = false,\n    watchPosition = false,\n    geolocationProvider = typeof navigator !== \"undefined\" &&\n        navigator.geolocation,\n} = {}) => WrappedComponent => {\n    let result = class Geolocated extends Component {\n        isCurrentlyMounted = false;\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                coords: null,\n                isGeolocationAvailable: Boolean(geolocationProvider),\n                isGeolocationEnabled: isOptimisticGeolocationEnabled,\n                positionError: null,\n            };\n        }\n\n        cancelUserDecisionTimeout = () => {\n            if (this.userDecisionTimeoutId) {\n                clearTimeout(this.userDecisionTimeoutId);\n            }\n        };\n\n        onPositionError = positionError => {\n            this.cancelUserDecisionTimeout();\n            if (this.isCurrentlyMounted) {\n                this.setState({\n                    coords: null,\n                    isGeolocationEnabled: false,\n                    positionError,\n                });\n            }\n            if (this.props.onError) {\n                this.props.onError(positionError);\n            }\n        };\n\n        onPositionSuccess = position => {\n            this.cancelUserDecisionTimeout();\n            if (this.isCurrentlyMounted) {\n                this.setState({\n                    coords: position.coords,\n                    isGeolocationEnabled: true,\n                    positionError: null,\n                });\n            }\n            if (this.props.onSuccess) {\n                this.props.onSuccess(position);\n            }\n        };\n\n        getLocation = () => {\n            if (\n                !geolocationProvider ||\n                !geolocationProvider.getCurrentPosition ||\n                !geolocationProvider.watchPosition\n            ) {\n                throw new Error(\"The provided geolocation provider is invalid\");\n            }\n\n            const funcPosition = (watchPosition\n                ? geolocationProvider.watchPosition\n                : geolocationProvider.getCurrentPosition\n            ).bind(geolocationProvider);\n\n            if (userDecisionTimeout) {\n                this.userDecisionTimeoutId = setTimeout(() => {\n                    this.onPositionError();\n                }, userDecisionTimeout);\n            }\n\n            this.watchId = funcPosition(\n                this.onPositionSuccess,\n                this.onPositionError,\n                positionOptions,\n            );\n        };\n\n        componentDidMount() {\n            this.isCurrentlyMounted = true;\n            if (!suppressLocationOnMount) {\n                this.getLocation();\n            }\n        }\n\n        componentWillUnmount() {\n            this.isCurrentlyMounted = false;\n            this.cancelUserDecisionTimeout();\n            if (watchPosition) {\n                geolocationProvider.clearWatch(this.watchId);\n            }\n        }\n\n        render() {\n            return <WrappedComponent {...this.state} {...this.props} />;\n        }\n    };\n    result.displayName = getDisplayName(WrappedComponent);\n    result.propTypes = {\n        onError: PropTypes.func,\n        onSuccess: PropTypes.func,\n    };\n    return result;\n};\n\nexport const geoPropTypes = {\n    coords: PropTypes.shape({\n        latitude: PropTypes.number,\n        longitude: PropTypes.number,\n        altitude: PropTypes.number,\n        accuracy: PropTypes.number,\n        altitudeAccuracy: PropTypes.number,\n        heading: PropTypes.number,\n        speed: PropTypes.number,\n    }),\n    isGeolocationAvailable: PropTypes.bool,\n    isGeolocationEnabled: PropTypes.bool,\n    positionError: PropTypes.shape({\n        code: PropTypes.oneOf([1, 2, 3]),\n        message: PropTypes.string,\n    }),\n    watchPosition: PropTypes.bool,\n};\n","import React from \"react\";\nimport { geolocated, geoPropTypes } from \"../src/index\";\n\nconst getDirection = (degrees, isLongitude) =>\n    degrees > 0 ? (isLongitude ? \"E\" : \"N\") : isLongitude ? \"W\" : \"S\";\n\n// adapted from http://stackoverflow.com/a/5786281/2546338\nconst formatDegrees = (degrees, isLongitude) =>\n    `${0 | degrees}Â° ${0 |\n        (((degrees < 0 ? (degrees = -degrees) : degrees) % 1) * 60)}' ${0 |\n        (((degrees * 60) % 1) * 60)}\" ${getDirection(degrees, isLongitude)}`;\n\nconst Demo = props => (\n    <div\n        style={{\n            fontSize: \"large\",\n            fontWeight: \"bold\",\n            margin: \"2rem\",\n        }}\n    >\n        {!props.isGeolocationAvailable ? (\n            <div>Your browser does not support Geolocation.</div>\n        ) : !props.isGeolocationEnabled ? (\n            <div>Geolocation is not enabled.</div>\n        ) : props.coords ? (\n            <div>\n                You are at{\" \"}\n                <span className=\"coordinate\">\n                    {formatDegrees(props.coords.latitude, false)}\n                </span>\n                ,{\" \"}\n                <span className=\"coordinate\">\n                    {formatDegrees(props.coords.longitude, true)}\n                </span>\n                {props.coords.altitude ? (\n                    <span>\n                        , approximately {props.coords.altitude} meters above sea\n                        level\n                    </span>\n                ) : null}\n                .\n            </div>\n        ) : (\n            <div>Getting the location data&hellip;</div>\n        )}\n        {!!props.positionError && (\n            <div>\n                <br />\n                Last position error:\n                <pre>{JSON.stringify(props.positionError)}</pre>\n            </div>\n        )}\n    </div>\n);\n\nDemo.propTypes = { ...Demo.propTypes, ...geoPropTypes };\n\nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(Demo);\n","import React, { useRef } from \"react\";\nimport Demo from \"./Demo.jsx\";\n\nconst App = () => {\n    const innerRef = useRef();\n\n    const getLocation = () => {\n        innerRef.current && innerRef.current.getLocation();\n    };\n\n    return (\n        <article style={{ textAlign: \"center\" }}>\n            {/* eslint-disable-next-line no-console*/}\n            <Demo onError={error => console.log(error)} ref={innerRef} />\n            <button\n                className=\"pure-button pure-button-primary\"\n                onClick={getLocation}\n                type=\"button\"\n            >\n                Get location\n            </button>\n        </article>\n    );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport App from \"./App\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <App mdxType=\"App\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}